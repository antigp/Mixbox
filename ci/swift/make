#!/bin/bash

set -x

# ====== bash_ci ======
# This section should be same across all bash files in the project
source "$(builtin cd "$(dirname "$0")" && git rev-parse --show-toplevel)/ci/bash/bash_ci.sh"
# =====================

main() {
    local action=$1
    
    cd "$SCRIPT_ROOT"

    __MIXBOX_CI_MACOS_DEPLOYMENT_TARGET=x86_64-apple-macosx10.14
    __MIXBOX_CI_OPTIMIZE_SPEED=${__MIXBOX_CI_OPTIMIZE_SPEED:-false}
    
    case "$action" in
        generate) generate_project;;
        r) __MIXBOX_CI_OPTIMIZE_SPEED=true; reopen_project;; # `r` is for rapid people
        reopen) reopen_project $2;;
        clean) clean_project;;
        build) build_project $2;;
        test) test_project;;
        *) __fatal_error "Unknown action: $action. Known actions: generate, reopen, reopen-fast, clean, build (TravisLogicTestsBuild), test";;
    esac
}

# Actions

generate_project() {
    generate_package
    
    swift package generate-xcodeproj --xcconfig-overrides Package.xcconfig --enable-code-coverage

    local xcodeproj_relative=`ls -1|grep ".xcodeproj"`
    local pbxproj_absolute=$SCRIPT_ROOT/$xcodeproj_relative/project.pbxproj
    
    patch_macosx_deployment_target "$pbxproj_absolute"
}

# Prevents the following error:
# `Compiling for macOS 10.13, but module 'AtomicModels' has a minimum deployment target of macOS 10.14: /some/path/AtomicModels.framework/Modules/AtomicModels.swiftmodule/x86_64-apple-macos.swiftmodule`
# TODO: Fix SPM in Emcee?
patch_macosx_deployment_target() {  
    local pbxproj_absolute=$1
    local temporary_file=/tmp/`uuidgen`
    
    cat "$pbxproj_absolute" \
        | perl -pe 's/MACOSX_DEPLOYMENT_TARGET = "10.13"/MACOSX_DEPLOYMENT_TARGET = "10.14"/' \
        > "$temporary_file"
    
    rm "$pbxproj_absolute"
    mv "$temporary_file" "$pbxproj_absolute"
}

reopen_project() {
    local xcode_app_name=`xcode-select -p|grep -oE "([^/]+.app)"|sed 's/\.app//'`
    local xcodeproj_relative=`ls -1|grep ".xcodeproj"`
    local xcodeproj_absolute=$SCRIPT_ROOT/$xcodeproj_relative
    local option=$2
    
    # Very useful for local developement
    if [ "$option" == fast ]
    then
        __MIXBOX_CI_OPTIMIZE_SPEED=true
    fi
    
    osascript -e '
        tell application "'$xcode_app_name'"
           tell workspace document "'$xcodeproj_relative'"
               close saving yes
           end tell
        end tell' || __ignore_error
    
    if ! generate_project
    then
        open "Package.swift"
        __fatal_error "Failed to generate project"
    fi
    
    echo "Ignore the following \"missing value\" log:"
    osascript -e '
        tell application "'$xcode_app_name'"
           open "'$xcodeproj_absolute'"
        end tell'

    echo "Quote from Apple:"
    echo "> KNOWN ISSUE: The open command in Xcode sometimes fails to return the opened document."
    echo "> It is recommended to ignore the result of the open command and instead find the opened"
    echo "> document in the application's documents."
}

clean_project() {
    swift package clean
    swift package reset
    rm -rf .build
    rm -rf *.xcodeproj
}

build_project() {
    local product=$1

    if [ "$__MIXBOX_CI_OPTIMIZE_SPEED" != "true" ]
    then
        clean_project
    fi
    
    args=( \
        swift build \
        -c release \
        -Xswiftc -Onone \
        -Xswiftc -whole-module-optimization \
        -Xswiftc -target \
        -Xswiftc "$__MIXBOX_CI_MACOS_DEPLOYMENT_TARGET" \
        --static-swift-stdlib \
    )
    
    if ! [ -z "$product" ]
    then
        args=("${args[@]}" --product "$product")
    fi
    
    "${args[@]}"
}

test_project() {
    if [ "$__MIXBOX_CI_OPTIMIZE_SPEED" != "true" ]
    then
        clean_project
    fi
    
    swift test \
        -Xswiftc -target \
        -Xswiftc "$__MIXBOX_CI_MACOS_DEPLOYMENT_TARGET"
}

# Support

generate_package() {
    if [ "$__MIXBOX_CI_OPTIMIZE_SPEED" != "true" ]
    then
        bash_ci_require_pyenv make_v1
        bash_ci_require_python_packages ./MakePackage/requirements.txt
        bash_ci_run_python3 ./MakePackage/make_package.py || exit 1
    else
        bash_ci_run_python3 ./MakePackage/make_package.py || handle_failure_of_calling_make_package_while_not_using_pyenv || exit 1
    fi
}

handle_failure_of_calling_make_package_while_not_using_pyenv() {
    pip3 install -r ./MakePackage/requirements.txt
    bash_ci_run_python3 ./MakePackage/make_package.py
}

main "$@"
